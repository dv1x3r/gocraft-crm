package component

import (
	"fmt"
	"gostart-crm/internal/app/model"
	"time"
)

templ ClientHead(cp CoreParams) {
	if cp.DebugMode {
		<link rel="stylesheet" href={ fmt.Sprintf("/css/client.css?v=%d", time.Now().Unix()) }/>
		<script type="module" src={ fmt.Sprintf("/js/client.js?v=%d", time.Now().Unix()) }></script>
	} else {
		<link rel="stylesheet" href={ fmt.Sprintf("/css/client.css?v=%d", startTime) }/>
		<script type="module" src={ fmt.Sprintf("/js/client.js?v=%d", startTime) }></script>
	}
}

templ Client(cp CoreParams) {
	@Core(cp, ClientHead(cp)) {
		<div class="bg-gradient-to-r from-slate-950 from-10% to-gray-900 text-white min-h-screen">
			{ children... }
		</div>
	}
}

type ClientMainPageParams struct {
	Core               CoreParams
	CategoryTree       model.Category
	Products           []model.Product
	FilterFacets       []model.FilterFacet
	SelectedCategoryID int64
}

templ ClientMainPage(params ClientMainPageParams) {
	@Client(params.Core) {
		<main class="flex items-center justify-center gap-4 min-h-screen">
			<nav id="hx-categories-oob" class="space-y-4">
				for _, root := range params.CategoryTree.Children {
					@CategoriesBlock(root, params.SelectedCategoryID)
				}
			</nav>
			<div class="w-[800px] h-[600px] flex flex-col border border-gray-800 rounded-lg">
				<div id="hx-filters-oob">
					if len(params.FilterFacets) > 0 {
						@FilterBlock(params.FilterFacets, params.SelectedCategoryID)
					}
				</div>
				<div id="hx-products" class="h-full">
					if params.SelectedCategoryID == 0 {
						<div class="flex items-center justify-center h-full text-slate-400">
							select category
						</div>
					} else {
						<div>
							TBD
							// { params.Products[0].Name }
						</div>
					}
				</div>
			</div>
		</main>
	}
}

templ CategoriesBlock(root model.Category, selectedCategoryID int64) {
	<ul class="space-y-2">
		<div>
			if root.Icon != nil {
				<span class={ *root.Icon }></span>
			}
			<span>{ root.Name }</span>
		</div>
		for _, category := range root.Children {
			<li class={ "shadow-lg border border-gray-800 rounded-lg hover:bg-slate-900", templ.KV("bg-slate-900", category.ID == selectedCategoryID) }>
				<a
					hx-get={ string(templ.URL(fmt.Sprintf("?category=%d", category.ID))) }
					hx-select="#hx-products"
					hx-target="#hx-products"
					hx-swap="outerHTML"
					hx-select-oob="#hx-categories-oob,#hx-filters-oob"
					class="block space-y-1 px-2 py-1 cursor-pointer"
				>
					<div class="text-sm text-slate-100">{ category.Name }</div>
					<div class="text-sm text-slate-400">Products available: { fmt.Sprint(category.RelatedProducts) }</div>
				</a>
			</li>
		}
	</ul>
}

templ FilterBlock(facets []model.FilterFacet, selectedCategoryID int64) {
	<section class="p-2 flex items-center space-x-1.5">
		<span class="fa fa-filter flex-none w-8 text-center"></span>
		<ul class="flex flex-wrap space-x-1.5">
			for _, facet := range facets {
				@FilterItem(facet)
			}
		</ul>
		<input
			id="hx-filters"
			name="filters"
			type="hidden"
			hx-get={ string(templ.URL(fmt.Sprintf("?category=%d", selectedCategoryID))) }
			hx-select="#hx-products"
			hx-target="#hx-products"
			hx-swap="outerHTML"
			hx-trigger="updated"
		/>
	</section>
}

templ FilterItem(facet model.FilterFacet) {
	<li x-data={ fmt.Sprintf("{ open: %t }", facet.Selected > 0) } class="relative">
		<button @click.prevent="open = !open" type="button" class="py-0.5 px-1 flex items-center justify-between space-x-2 rounded-lg hover:bg-slate-900 active:bg-slate-800 transition">
			<span x-cloak class="fa flex-none text-center" :class="open ? 'fa-minus' : 'fa-plus'"></span>
			<span>{ facet.Name }</span>
			<span id={ fmt.Sprintf("hx-filter-sel-%s", facet.ID) } hx-swap-oob="true" class="min-w-6 px-2 bg-slate-800 text-xs rounded-lg">
				if facet.Selected > 0 {
					{ fmt.Sprint(facet.Selected ) }
				}
			</span>
		</button>
		<div x-cloak x-show="open" x-collapse class="absolute">
			<ul id={ fmt.Sprintf("hx-filter-ul-%s", facet.ID) } hx-swap-oob="true" class="space-y-1.5 p-2 select-none bg-slate-800 rounded-lg border border-white">
				for _, value := range facet.Values {
					<li class="flex items-center *:cursor-pointer">
						<input
							id={ fmt.Sprintf("filter-cb-%s-%d", facet.ID, value.ID) }
							value={ fmt.Sprintf("%s-%d", facet.ID, value.ID) }
							checked?={ value.IsSelected }
							type="checkbox"
							@click="filtersSet"
						/>
						<label
							for={ fmt.Sprintf("filter-cb-%s-%d", facet.ID, value.ID) }
							class={ "ml-2 w-full text-sm truncate", templ.KV("text-slate-400", value.Products == 0) }
						>
							{ fmt.Sprintf("%s (%d)", value.Name, value.Products) }
						</label>
					</li>
				}
			</ul>
		</div>
	</li>
}
