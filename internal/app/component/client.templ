package component

import (
	"fmt"
	"gostart-crm/internal/app/model"
	"strconv"
	"time"
)

templ ClientHead(cp CoreParams) {
	if cp.DebugMode {
		<link rel="stylesheet" href={ fmt.Sprintf("/css/client.css?v=%d", time.Now().Unix()) }/>
		<script type="module" src={ fmt.Sprintf("/js/client.js?v=%d", time.Now().Unix()) }></script>
	} else {
		<link rel="stylesheet" href={ fmt.Sprintf("/css/client.css?v=%d", startTime) }/>
		<script type="module" src={ fmt.Sprintf("/js/client.js?v=%d", startTime) }></script>
	}
}

templ Client(cp CoreParams) {
	@Core(cp, ClientHead(cp)) {
		<div class="bg-gradient-to-r from-slate-950 from-10% to-gray-900 text-white flex items-center justify-center h-screen">
			{ children... }
		</div>
	}
}

type ClientMainPageParams struct {
	Core         CoreParams
	CategoryTree model.Category
	Products     []model.Product
	Filter       *model.Filter
}

templ ClientMainPage(params ClientMainPageParams) {
	@Client(params.Core) {
		for _, category := range params.CategoryTree.Children {
			@Todos(category.Children)
		}
	}
}

templ Todos(todos []model.Category) {
	<div class="flex items-center gap-4 p-4 h-full">
		<div class="mx-auto">
			for _, todo := range todos {
				@TodoCard(todo)
			}
		</div>
	</div>
}

templ TodoCard(todo model.Category) {
	<div class="flex flex-col p-4 rounded shadow-lg ">
		<div class="border border-gray-800 border-opacity-30 bg-gradient-radial-dark rounded-lg p-2">
			<p class="text-slate-100 font-medium">{ todo.Name }</p>
			<div class="">
				<p class="text-slate-600 text-sm">Description: { todo.Name }</p>
				<p class="text-slate-600 text-sm">Quantity: { strconv.FormatInt(todo.ID, 10) }</p>
			</div>
		</div>
	</div>
}
